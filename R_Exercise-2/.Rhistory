}
b
for(i in 1:nclo(m))
{
b[i]=0;
}
for(i in 1:ncol(m))
{
b[i]=0;
}
b
for(i in 1:ncol(m))
{
for(j in 1:nrow(m))
{
b[i]=b[i]+m[j,i]
}
}
b
for(j in 1:ncol(m))
{
b[j]=b[j]/nrow(m)
}
b
m[1,1]
m[1,2]
m[12,2]
m->m
m(1,1)
m[1,1]
m[1,1]
m[:,1]
m[,:]
m[V1,V1]
m
m[1,V1]
v=c()
v=m
v
v
v[1,1]
d=c()
d
d<-m
d
d(1,1)
d[1,1]
for(i in 1:ncol(m))
{
}
l=data.matrix(m)
l
l(1,1)
l[1,1]
l[1,:]
l[1,]
l[2,]
l[3,]
for(i in 1:ncol(m))
{
d=c()}
a=c()
a
for(i in 1:ncol(m))
a[i]=0
a
for(i in 1:ncol(m))
{
for(j in 1:ncol(m))
{
a[j]=a[j]+l[j,i]
}
}
a
for(j in 1:ncol(m))
{
a[j]=a[j]/nrow(m)
}
a
cls
clc
clear
clear all
f
m
f<-cov(m)
f
f
f[1,1]
f
a=c)
f
a=c()
a[1]=0
a
f
a=c()
for(i in 1:nrow(f))
{
for(j in 1:ncol(f))
{
if(i!=j)
{
a[i,j]=f[i,j]/sqrt(f[i,j-1]*f[i+1,j])
}
}
}
a
a[0,0]=10
a<-matrix(,nrow=10,ncol=10)
a
for(i in 1:nrow(f))
{
for(j in 1:ncol(f))
{
if(i!=j)
{
a[i,j]=f[i,j]/sqrt(f[i,j-1]*f[i+1,j])
}
}
}
a
 for(i in 1:nrow(f))
{
 for(j in 1:ncol(f))
{
a[i,j]=0
}
}
a
for(i in 1:nrow(f))
{
for(j in 1:ncol(f))
{
if(i!=j)
{
a[i,j]=f[i,j]/(sqrt(f[i,j-1]*f[i+1,j]))
}
}
}
a
f
for(i in 1:nrow(f))
{
for(j in 1:ncol(f))
{
if(i!=j)
{
a[i,j]<-f[i,j]/(sqrt(f[i,j-1]*f[i+1,j]))
}
}
}
a
 for(j in 1:ncol(f))
a{
a
f
f
m
m[1,1]
m[,V1]
dnorm(m[,V1])
plot(dnorm(m[,V1]))
hx<-dnorm(m[,V1])
x <- seq(-4, 4, length=100)
degf <- c(1, 3, 8, 30)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("df=1", "df=3", "df=8", "df=30", "normal")
plot(x, hx, type="l", lty=2, xlab="x value",
  ylab="Density", main="Comparison of t Distributions")
x <- seq(-10, 10, length=19020)
plot(x, hx, type="l", lty=2, xlab="x value",
)
m
m
var(m(,V1))
var(m[,V1])
b<-matrix(, nrow = 10, ncol = 10)
for(i in 1:10)
{
}
b<-matrix(, nrow = 2, ncol = 10)
for(i in 1:10)
{
b[1,i]=i
}
b
h=data.matrix(m);
for(i in 1:10)
{
b[1,i]<-var(h[,1])
}
b
for(i in 1:10)
{
b[1,i]=i
}
b
for(i in 1:10)
{
b[2,i]<-var(h[,i])
}
b
order(b)
b
c->b[order(b$1,)]
c->b[order(b)]
c->order(b)
c<-b[order(b$1,)]
c<-order(b)
c
b
c->b[2,]
b[1,]
c<-b[2,]
c
order(c)
order(cb)
b
df[order(b[1,],b[2,],decreasing=TRUE),]
df[order(b[,1],b[,2],decreasing=TRUE),]
b
b[order(b[2,],b[1,],decreasing=TRUE),]
b[order(b[2,],]
b[order(b[2,],)]
b[order(b[2,],b[1,],decreasing=TRUE),]
b[2,]
b[order(b[,1],b[,2],df[order(df[,1],df[,2],decreasing=TRUE),],]
b[order(b[,1],b[,2],b[,3],)]
b[order(b[,1],b[,2],b[,3],b[,4],b[,5],b[,6],b[,7],b[,8],b[,9],b[,10])]
b
v<-order(b)
v
v<-order(b[2,])
v
v<-order(b[1,])
v
v<-order(b[2,])
v
v<-order(b[2,]b[1,],)
v<-order(b[2,]b[1,])
v<-order(b[2,])
v
a<-b[2,]
order(a)
a
v<-order(b[2,],DESENDING='TRUE')
v<-order(b[2,],decreasing=TRUE)
v
h=data.matrix(m);
b<-matrix(, nrow = 1, ncol = 10)
for(i in 1:10)
{
b[1,i]<-var(h[,i])
}
v<-order(b[2,],decreasing=TRUE)
v<-order(b[1,],decreasing=TRUE)
v
b
a<-c()
b<-c()
a
b
m
h=data.matrix(m);
for(i in 1:10)
{
a[i]=median(h[,i])
b[i]<-getmode(h[,i])
}
getmode <- function(v) {
   uniqv <- unique(v)
   uniqv[which.max(tabulate(match(v, uniqv)))]
}
for(i in 1:10)
{
a[i]<-median(h[,i])
b[i]<-getmode(h[,i])
}
a
b
q()
q()
data<-read.table('Titanic.csv',sep=',')
data
data<-fread('Titanic.csv',sep=',')
data<-read('Titanic.csv',sep=',')
data<-read.data('Titanic.csv',sep=',')
data
data[,1]
data[,2]
data[2:,2]
data[2:nrow,2]
data[2:nrow(data),2]
data[2:,2]
data[2:nrow(data),2]
data[2:nrow(data),2]$Levels
data[2:nrow(data),2][1]$Levels
a=c();
a<-unique
a<-unique(data[2:nrow(data),2]);
a
a(1)
a(1,1)
a[1]
a[2]
a[3]
c=a[3]
c
a<-unique(data[2:nrow(data),2]);
a
a<-factor(data[2:nrow(data),2]);
a
a<-unique(factor(data[2:nrow(data),2]));
a
a[1]
a[2]
a[3]
a[4]
a[5]
a
levels(droplevels(a))
b<-levels(droplevels(a))
b
b[1]
b[2]
b<-levels(droplevels(data))
b
b<-levels(droplevels(a))
b
a<-unique(factor(data[2:nrow(data),3]));
c<-levels(droplevels(a))
c
a<-unique(factor(data[2:nrow(data),4]));
d<-levels(droplevels(a))
d
for (i in 2:nrow(data))
{
for(j in 2:ncol(data))
{
if(data[i,j]=="Adult")
{
print(data[i,5]);
}
}
}
data
q()
mydata
data
sapply(data, function(x) length(unique(x)))
D1<-unique(factor(mydata[,2]));
D1<-unique(factor(data[,2]));
D1
D1[1]
D1[2]
c=D1[2]
c
c=='1st'
c=='Levels'
c=='2nd'
c=='1st'
c=D1[1]
c
c=='Class'
data
D[1]
D[1]
D1[1]
C1<-levels(droplevels(D1));
C1
mydata=read.csv("Titanic.csv");
mydata
D1<-unique(factor(mydata[,2]));
C1<-levels(droplevels(D1));
D1
D1[1]
D1[1]=='1st'
D1[1]=='2st'
C1
C1[1]
D<-C1+D!
D<-C1+D1
D<-C1 D1
D<-C1,D1
C1
D1
D2<-unique(factor(mydata[,3]));
C2<-levels(droplevels(D2));
C2
D<-C1,C2
D<-C1 C2
D<-C1+C2
d<-c(C1,C2)
d
D3<-unique(factor(mydata[,4]));
C3<-levels(droplevels(D3));
d<-c(d,C3)
d
d[1]
d[2]
d[3]
d[4]
d[4]
d[5]
d[6]
d[7]
cbind(C1,C2)
cbind(C1,C2,C3)
C2
C3
s<-cbind(C1,C2,C3)
s<-data.matrix(s)
s
w<-colnames(s)
w
s[,w[1]]
s[,w[2]]
s[,w[3]]
unique(s[,w[3]])
mydata
source('DesicionTree(Gini).R')
source('DesicionTree(Gini).R')
source('DesicionTree(Gini).R')
source('DesicionTree(Gini).R')
source('DesicionTree(Gini).R')
source('DesicionTree(Gini).R')
s
s[,1]
s[,2]
s[,3]
unique(s[,3])
q()
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
a<=c(1,2,3);
a<-c(1,2,3);
b<-c(1.3,2.3,3.333);
c<-cbind(a,c)
c
c<-cbind(a,b)
c
rotate <- function(x) t(apply(x, 2, rev))
rotate(c)
rotate(c)
rotate(rotate(c))
rotate(rotate(rotate(c)))
mac(c)
max(c)
c
max(c)
a
b
order(b,DECRESING);
sort(b,DECRESING);
order(b,decresing=TRUE);
order(b,decreasing=TRUE);
z<-order(b,decreasing=TRUE);
z[1]
source('DTG.R')
mydata
a
b
rbind(a,b)
rbind(a,b,c)
rbind(a,b)
d<-rbind(a,b)
v<-c(3,4,5)
d<-rbind(d,v)
d
d<-c()
d<-rbind(a,b)
d
source('DTG.R')
d<-rbind(a,b)
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
colnames(mydata)
colnames(mydata[,1])
colnames(mydata[,2])
colname(mydata[,2])
colname(mydata[,2])
f<-c(1,2,3)
is.element(1, f)
is.element(4, f)
index<-index[-which(index==max_attri)]
f<-f[-which(f==1)]
f
f<-c(2,3,4)
f<-f[-which(f==2)]
f
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
source('DTG.R')
q()
